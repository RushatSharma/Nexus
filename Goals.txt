
FUTURE GOAL: ADMIN PANEL FOR CONTENT MANAGEMENT

1. OBJECTIVE
   To create a secure, user-friendly admin panel within the Nexus website. This panel will empower non-technical employees to easily manage the project case studies (create, update, and delete them) without needing to interact with the database directly or modify the application's code. This will make the website's portfolio content fully dynamic and easy to maintain.

---

2. CORE FEATURES & IMPLEMENTATION PLAN
   The development will be broken down into the following key phases:

---

PHASE 1: FOUNDATION - ROLE-BASED ACCESS CONTROL (RBAC)
This phase ensures that only authorized users can access the admin panel.

• User Roles in Firestore:

* A new field, "role", will be added to each document in the "users" collection.
* This field will have values like "admin" or "user". Initially, roles will be assigned manually in Firestore.

• Update Authentication Context:

* The AuthContext will be updated to fetch the role of the logged-in user and store it.
* A new boolean flag, "isAdmin", will be made available throughout the application via the useAuth() hook.

• Create Protected Routes:

* A new AdminRoute component will be created.
* This component will wrap all admin-related pages. It will check if the current user has the "admin" role. If not, the user will be redirected to the home page or a "Not Authorized" page.

---

PHASE 2: ADMIN DASHBOARD UI
This phase involves creating the main interface for managing projects.

• Admin Dashboard Page (/admin/dashboard):

* This will be the central hub for admins.
* It will display a list or table of all project case studies currently in the Firestore "projects" collection.
* The table will show key information like Project Title, Client, and Category.

• Core Actions:

* Add New Project: A prominent button that navigates to the project creation form.
* Edit Project: An "Edit" button on each row in the project list, linking to the form for that specific project.
* Delete Project: A "Delete" button on each row, which will prompt for confirmation before permanently removing the project document from Firestore.

---

PHASE 3: PROJECT CONTENT FORM
This is the form where employees will input and edit case study details.

• Create/Edit Form Page (/admin/projects/edit/:id):

* A single, reusable form component will handle both creating new projects and editing existing ones.
* When editing, the form will be pre-populated with the data from the selected project.

• Form Fields:

* Title (Text Input)
* Client (Text Input)
* Slug (Text Input, possibly auto-generated from the title)
* Description (Text Area)
* Services (Tag Input or Checkboxes)
* Challenge, Solution, Results, etc. (Rich Text Editors for better formatting)

• Data Handling:

* Upon submission, the form will validate the data and then either create a new document or update an existing document in the "projects" collection in Firestore.

---

PHASE 4: IMAGE AND FILE MANAGEMENT
This phase integrates a system for uploading images for the case studies.

• Integrate Firebase Storage:

* Firebase Storage will be used to host all user-uploaded images (e.g., the main project image and gallery photos).

• Create an Image Uploader Component:

* A user-friendly file upload component will be added to the project form.
* This will allow admins to select images from their computer.

• Upload Workflow:

1. The admin selects an image.
2. The application uploads the image file to a designated folder in Firebase Storage.
3. Upon a successful upload, Firebase Storage provides a public URL for the image.
4. This URL is then saved as a string in the appropriate field (e.g., imageUrl) in the project's Firestore document.
